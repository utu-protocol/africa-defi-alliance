@startuml
'https://plantuml.com/sequence-diagram

autonumber

actor "Driver via MM Driver App" As MMd
participant SympliFi As S
participant UTU As U
participant "MM Backend" As MMb
participant Bitlipa As B
participant "Driver Mpesa" As M

group Do once for each driver
MMb -> B : postDriverWallet(driverId)
return walletAddress
end group

group Do whenever MM changes key pair to sign JWTs (rarely)
MMb -> MMb ++: create key pair\nfor JWT signing

MMb -> S ++ : public key
S -> S: store public key
deactivate S

Mmb -> MMd : new JWT(walletAddress)\nfor logged in drivers
note left
Optional: in the first version,
we could just ask drivers to
restart the app or re-login if
a Simplify call fails.
end note

end group

group Driver login
MMd -> MMb ++ : login()
activate MMd
MMb -> MMb: create JWT(walletAddress)\nsigned by MM key
return JWT
deactivate MMd
end group

MMd -> S ++ : getAvailableAmount(applicant, JWT)
activate MMd
note left
The applicant parameter contains
profile data that is used to
determine creditworthiness.

In the MM advance payout use case,
sending just id and phone number
is sufficient, because this
effectively only gets a driver's
available balance according to
their current earnings, not a "real"
creditworthiness assessment.

The JWT will be sent in the
Authorization header using the
Bearer scheme (also in step 14
below).
end note

S -> S : verify JWT
note left
Verify the JWT wih the public key received
earlier from MM.

If verification fails, return error and stop
(ommitted here for better readability).
end note

par
S -> U ++ : getBorrowingPower(applicant, maxProbabilityOfDefault)
U -> MMb ++ : getTotalNetEarnings(applicant)
note left
UTU doesn't invoke its proper creditworthiness model
here, but only forwards the request to MM to get the
driver's current total net earnings, which determines
the amount which might be paid out.
end note

return totalNetEarnings(applicant)
return borrowingPowerAmount(applicant)
note left
In the case where the driver can borrow
100% of their totalNetEarnings without
having to pay fees, borrowingPowerAmount
 = totalNetEarnings.
end note

also
S -> B ++ : getAmountInUSDC()
return availableAmountInUSDC

also
S -> S ++ : getAvailableLiquidity()
return availableAmount
end par

return availableAmount(applicant)
note left
TODO: add second return value describing
interest rate and fee structure:
interest rate, min interest, fixed fee
interest rate bands?
end note


    MMd -> S ++ : apply(applicant, amount, JWT)
    S -> S : verify JWT

    alt amount <= availableAmount
      S -> B ++ : disburse(applicant, amount)

      B -> M ++ : send(applicant, amount)
      M -> B : tx pending(txid)
      B -> S : tx pending(txid)
      deactivate B
      S -> MMd : tx pending(txid)
    else
      S -> MMd : error: amount > availableAmount
      deactivate S
    end


M --> B ++ : result(txid)
deactivate M
note left
    Result can be either tx completed
    or failure. Simplify and MM Backend
    are expected to do the appropriate
    things in each case.

    But what if this never happens?
end note
B --> MMb ++ : result(txid)
deactivate B
deactivate S
MMb --> MMd : result(txid)
deactivate MMb
MMd --> MMd : Show result to driver
deactivate MMd
@enduml
